services:
  # ============================================
  # KONG API GATEWAY (Development Mode)
  # ============================================
  kong:
    image: kong:3.7
    container_name: mealprep-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_LOG_LEVEL: debug
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
    ports:
      - "8000:8000"  # API Gateway (your frontend will use this)
      - "8444:8001"  # Admin API (for debugging)
    volumes:
      - ./kong.yml:/kong/kong.yml:ro
    networks:
      - mealprep-network
    depends_on:
      - auth-service
      - recipe-service
      - recommendations-service

  # ============================================
  # POSTGRES
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: mealprep-postgres
    environment:
      POSTGRES_DB: mealprep
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mealprep-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # REDIS
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: mealprep-redis
    ports:
      - "6379:6379"
    networks:
      - mealprep-network
    command: redis-server --appendonly yes

  # ============================================
  # AUTH SERVICE
  # ============================================
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    container_name: mealprep-auth
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: mealprep
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      AUTH_PORT: 8001
      LOG_LEVEL: debug
      LOG_FORMAT: ${LOG_FORMAT:-json}
      LOG_FILE: /app/logs/auth.log
    volumes:
      - ./logs:/app/logs
    ports:
      - "8001:8001"  # Exposed for direct testing if needed
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mealprep-network

  # ============================================
  # RECIPE CATALOGUE SERVICE
  # ============================================
  recipe-service:
    build:
      context: .
      dockerfile: Dockerfile.recipe-catalogue
    container_name: mealprep-recipe
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: mealprep
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      RECIPE_CATALOGUE_PORT: 8002
      LOG_LEVEL: debug
      LOG_FORMAT: ${LOG_FORMAT:-json}
      LOG_FILE: /app/logs/recipe.log
    volumes:
      - ./logs:/app/logs
    ports:
      - "8002:8002"  # Exposed for direct testing if needed
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mealprep-network

  # ============================================
  # RECOMMENDATIONS SERVICE
  # ============================================
  recommendations-service:
    build:
      context: .
      dockerfile: Dockerfile.recommendations
    container_name: mealprep-recommendations
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: mealprep
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      RECOMMENDATIONS_PORT: 8003
      LOG_LEVEL: debug
      LOG_FORMAT: ${LOG_FORMAT:-json}
      LOG_FILE: /app/logs/recommendations.log
    volumes:
      - ./logs:/app/logs
    ports:
      - "8003:8003"  # Exposed for direct testing if needed
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mealprep-network

  # -------------------------------
  # Flyway migration runners
  # -------------------------------
  flyway-auth:
    image: flyway/flyway:10
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      -url=jdbc:postgresql://postgres:5432/mealprep
      -user=postgres
      -password=postgres123
      -locations=filesystem:/flyway/sql/auth
      -schemas=auth
      -connectRetries=30
      migrate
    volumes:
      - ./migrations:/flyway/sql:ro
    networks:
      - mealprep-network

  flyway-recipe-catalogue:
    image: flyway/flyway:10
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      -url=jdbc:postgresql://postgres:5432/mealprep
      -user=postgres
      -password=postgres123
      -locations=filesystem:/flyway/sql/recipe-catalogue
      -schemas=recipe_catalogue
      -connectRetries=30
      migrate
    volumes:
      - ./migrations:/flyway/sql:ro
    networks:
      - mealprep-network

  flyway-recommendations:
    image: flyway/flyway:10
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      -url=jdbc:postgresql://postgres:5432/mealprep
      -user=postgres
      -password=postgres123
      -locations=filesystem:/flyway/sql/recommendations
      -schemas=recommendations
      -connectRetries=30
      migrate
    volumes:
      - ./migrations:/flyway/sql:ro
    networks:
      - mealprep-network

volumes:
  postgres_data:

networks:
  mealprep-network:
    driver: bridge

# ============================================
# DEVELOPMENT NOTES:
# ============================================
#
# Access Points:
# - Kong Gateway: http://localhost:8000 (use this!)
# - Kong Admin: http://localhost:8001 (for debugging)
# - Auth Direct: http://localhost:8001 (if needed)
# - Recipe Direct: http://localhost:8002 (if needed)
# - Recs Direct: http://localhost:8003 (if needed)
#
# Services are exposed on their ports for:
# - Direct testing if Kong has issues
# - Debugging
# - Running services outside Docker
#
# In production, only Kong port would be exposed!