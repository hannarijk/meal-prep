version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: mealprep-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mealprep
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mealprep-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    container_name: mealprep-auth
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: mealprep
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      AUTH_PORT: 8001
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      LOG_FILE: /app/logs/auth.log
    volumes:
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mealprep-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  recipe-catalogue-service:
    build:
      context: .
      dockerfile: Dockerfile.recipe-catalogue
    container_name: mealprep-recipe-catalogue
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: mealprep
      RECIPE_CATALOGUE_PORT: 8002
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      LOG_FILE: /app/logs/recipe-catalogue.log
    volumes:
      - ./logs:/app/logs
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mealprep-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  recommendations-service:
    build:
      context: .
      dockerfile: Dockerfile.recommendations
    container_name: mealprep-recommendations
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: mealprep
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      RECOMMENDATIONS_PORT: 8003
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      LOG_FILE: /app/logs/recommendations.log
    volumes:
      - ./logs:/app/logs
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mealprep-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # -------------------------------
  # Flyway migration runners
  # -------------------------------
  flyway-auth:
    image: flyway/flyway:10
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      -url=jdbc:postgresql://postgres:5432/mealprep
      -user=postgres
      -password=postgres123
      -locations=filesystem:/flyway/sql/auth
      -schemas=auth
      -connectRetries=30
      migrate
    volumes:
      - ./migrations:/flyway/sql:ro
    networks:
      - mealprep-network

  flyway-recipe-catalogue:
    image: flyway/flyway:10
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      -url=jdbc:postgresql://postgres:5432/mealprep
      -user=postgres
      -password=postgres123
      -locations=filesystem:/flyway/sql/recipe-catalogue
      -schemas=recipe_catalogue
      -connectRetries=30
      migrate
    volumes:
      - ./migrations:/flyway/sql:ro
    networks:
      - mealprep-network

  flyway-recommendations:
    image: flyway/flyway:10
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      -url=jdbc:postgresql://postgres:5432/mealprep
      -user=postgres
      -password=postgres123
      -locations=filesystem:/flyway/sql/recommendations
      -schemas=recommendations
      -connectRetries=30
      migrate
    volumes:
      - ./migrations:/flyway/sql:ro
    networks:
      - mealprep-network

volumes:
  postgres_data:

networks:
  mealprep-network:
    driver: bridge